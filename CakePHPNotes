my hash     59d4b8bbee663673178fa5a213fa4bcce54ae424
attendance http://leaveme.sanisoft.com/

for internet connection
sudo route del default && sudo route add default gw 192.168.1.162
sudo route del default && sudo route add default gw 192.168.1.161


192.168.1.165/adminer
CakePHP Folder Structure

    app
    lib
    vendors
    plugins
    .htaccess
    index.php
    README


   - The app folder will be where you work your magic: it’s where your application’s files will be placed.
   - The lib folder is where we’ve worked our magic. Make a personal commitment not to edit files in this folder. We can’t help you if you’ve modified the core. Instead, look into modifying Application Extensions.
   - Finally, the vendors folder is where you’ll place third-party PHP libraries you need to use with your CakePHP applications.

Components, Behaviors, and Helpers are classes that provide extensibility and reusability to quickly add functionality to the base MVC classes in your applications.

Controller
	Controllers provide a number of methods that handle requests. These are called actions. By default, each public method in a controller is an action, and is accessible from a URL. An action is responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.

action
	:- it is nothing but method or function.

uses
	:- 1 type of uses used to include classes & 2nd type uses is used to include model. i.e. $uses & app::uses
    App::uses('AppModel', 'Model');

View
  A view file is stored in /app/View/, in a subfolder named after the controller that uses the file. It has a filename corresponding to its action. For example, the view file for the Products controller’s “view()” action would normally be found in /app/View/Products/view.ctp.
    The view layer in CakePHP can be made up of a number of different parts

  views: 
      Views are the part of the page that is unique to the action being run. They form the meat of your application’s response.
  elements:
      smaller, reusable bits of view code. Elements are usually rendered inside views.
  layouts: 
      view files that contain presentational code that wraps many interfaces in your application. Most  views are rendered inside a layout.
  helpers:
       these classes encapsulate view logic that is needed in many places in the view layer. Among other things, helpers in CakePHP can help you build forms, build AJAX functionality, paginate model data, or serve RSS feeds.
  Extending Views
    $this->extend('/Common/view');

All helpers extend a special class, AppHelper (just like models extend AppModel and controllers extend AppController).

Collections
    Components, Helpers, Behaviors and Tasks all share a similar structure and set of behaviors.The collection objects in CakePHP, give you a uniform way to interact with several different kinds of objects in your application.
  Loading and unloading objects
    $this->Prg = $this->Components->load('Prg');
    $this->Components->unload('Cookie');

Overriding Classes in cakephp
    You can override almost every class in the framework, exceptions are the App and Configure classes.

    Whenever you like to perform such overriding, just add your class to your app/Lib folder mimicking the internal structure of the framework. Some examples to follow:

        To override the Dispatcher class, create app/Lib/Routing/Dispatcher.php

a key for having good quality code is making your objects loosely coupled and strongly cohesive at the same time.

dot notation

    Dot notation defines an array path, by separating nested levels with . For example:

    Asset.filter.css

    Would point to the following value:

    array(
        'Asset' => array(
            'filter' => array(
                'css' => 'got me'
            )
        )
    )

Containable   (class ContainableBehavior)->search,filter & finding

  This model behavior allows you to =>filter and limit model find operations.
  ,increasing the speed and overall performance of your application. The class will also help you search and filter your data for your users in a clean and consistent way.

  Containable allows you to streamline and simplify operations on your model bindings. 
  It works by temporarily or permanently altering the associations of your models. 
  It does this by using the supplied containments to generate a series of bindModel and unbindModel calls. Since Containable only modifies existing relationships it will not allow you to restrict results by distant associations. Instead you should refer to Joining tables.

  To use the new behavior, you can add it to the $actsAs property of your model:

class Post extends AppModel {
    public $actsAs = array('Containable');
}
--
You can also attach the behavior on the fly:

$this->Post->Behaviors->load('Containable');


$this->Post->contain('Tag');
$this->Post->find('all');

$this->Post->recursive = -1;
$this->Post->find('all');

In CTP Files, required is taken for html elements(input,... etc) 


 Model::isUnique()¶

    The data for the field must be unique, it cannot be used by any other rows:

    public $validate = array(
        'login' => array(
            'rule' => 'isUnique',
            'message' => 'This username has already been taken.'
        )
    );

$$$$$$$$$$$$
cakephp maps with database and while inserting data on the view restrict other datatypes & facilates matching datatypes. 

Choosing an Authentication type
   In basic authentication, the username and password are transmitted as plain-text to the server. This makes basic authentication un-suitable for applications without SSL, as you would end up exposing sensitive passwords. Digest authentication uses a digest hash of the username, password, and a few other details. This makes digest authentication more appropriate for applications without SSL encryption.


   Jquery
   var pathname = window.location.pathname; // Returns path only (/path/example.html)
   var url      = window.location.href;     // Returns full URL (https://example.com/path/example.html)
   var origin   = window.location.origin;   // Returns base URL (https://example.com)